import Button from '@mui/material/Button'
import TextField from '@mui/material/TextField'
import Dialog from '@mui/material/Dialog'
import DialogActions from '@mui/material/DialogActions'
import DialogContent from '@mui/material/DialogContent'
import DialogTitle from '@mui/material/DialogTitle'
import Box from '@mui/material/Box'
import Grid from '@mui/system/Unstable_Grid/Grid'
import { useEffect, useState } from 'react'
import { createUniqueIdWithConstraints } from './Utiltesttable'
import { TestType } from './testingTypes'
import { useForm } from 'react-hook-form'

import { DevTool } from '@hookform/devtools'

//imitate api delay
function timeout(delay: number) {
  return new Promise(res => setTimeout(res, delay))
}
type FormValues = {
  address: string
  company: string
  companyEmail: string
  country: string
  contact: string
  name: string
  service: string
  total: number
  total2: number
  balance: number
}
export const AddTestCaseDialog = ({ testsData, setTestsData }) => {
  const [open, setOpen] = useState(false)
  const existingIds = testsData?.map(invoice => invoice.id)
  const [newId, setNewId] = useState(createUniqueIdWithConstraints(existingIds, 10_000))
  useEffect(() => setNewId(createUniqueIdWithConstraints(existingIds, 10_000)), [testsData])
  const form = useForm<FormValues>({
    defaultValues: {
      address: '',
      company: '',
      companyEmail: '',
      country: '',
      contact: '',
      name: '',
      service: '',
      total: 100,
      total2: 100,
      balance: 200
    }
  })

  const { register, handleSubmit, formState, control, reset } = form
  const { errors, isSubmitting, isSubmitSuccessful } = formState
  const onSubmit = async (data: FormValues, e: React.BaseSyntheticEvent) => {
    e.preventDefault()
    await timeout(3000)

    //template to add to the tests list
    const newTest: TestType = {
      id: createUniqueIdWithConstraints(existingIds, 2000),
      address: data.address,
      company: data.company,
      companyEmail: data.companyEmail,
      country: data.country,
      contact: data.contact,
      name: data.name,
      service: data.service,
      total: data.total,
      total2: data.total2,
      avatar: '/images/avatars/7.png',
      invoiceStatus: 'Downloaded',
      balance: data.balance
    }
    setTestsData((currentTestData: TestType) => [newTest, ...currentTestData])
    reset()
    handleClose()
  }

  const handleClickOpen = () => {
    setOpen(true)
  }
  const handleClose = () => {
    setOpen(false)
    reset()
  }

  return (
    <div>
      <Button sx={{ mb: 2 }} variant='contained' onClick={handleClickOpen}>
        Add new Testcase
      </Button>
      <Dialog open={open} onClose={handleClose}>
        <DialogTitle>New test case dialog</DialogTitle>
        <DialogContent>
          <Grid container direction={'column'}>
            <Box sx={{ padding: 2 }}>
              <form onSubmit={handleSubmit(onSubmit)} noValidate>
                <p> {newId}</p>
                <TextField
                  sx={{ padding: 2 }}
                  type='text'
                  id='address'
                  label='Address'
                  variant='standard'
                  {...register('address', { required: 'Address is Required' })}
                  error={!!errors.address}
                  helperText={errors.address?.message}
                />
                <TextField
                  sx={{ padding: 2 }}
                  type='text'
                  id='company'
                  label='Company'
                  variant='standard'
                  {...register('company', { required: 'Company is Required' })}
                  error={!!errors.company}
                  helperText={errors.company?.message}
                />
                <TextField
                  sx={{ padding: 2 }}
                  type='email'
                  id='companyEmail'
                  label='Company Email'
                  variant='standard'
                  {...register('companyEmail', { required: 'Email is Required' })}
                  error={!!errors.companyEmail}
                  helperText={errors.companyEmail?.message}
                />
                <TextField
                  sx={{ padding: 2 }}
                  type='text'
                  id='country'
                  label='Country'
                  variant='standard'
                  {...register('country', { required: 'Country is Required' })}
                  error={!!errors.country}
                  helperText={errors.country?.message}
                />
                <TextField
                  sx={{ padding: 2 }}
                  type='text'
                  id='contact'
                  label='Contact'
                  variant='standard'
                  {...register('contact', { required: 'Contact is Required' })}
                  error={!!errors.contact}
                  helperText={errors.contact?.message}
                />
                <TextField
                  sx={{ padding: 2 }}
                  type='text'
                  id='name'
                  label='Name'
                  variant='standard'
                  {...register('name', { required: 'Name is Required' })}
                  error={!!errors.name}
                  helperText={errors.name?.message}
                />
                <TextField
                  sx={{ padding: 2 }}
                  type='text'
                  id='service'
                  label='Service'
                  variant='standard'
                  {...register('service', { required: 'Service is Required' })}
                  error={!!errors.service}
                  helperText={errors.service?.message}
                />
                <TextField
                  sx={{ padding: 2 }}
                  type='number'
                  id='total'
                  label='Total'
                  variant='standard'
                  {...register('total')}
                />
                <TextField
                  sx={{ padding: 2 }}
                  type='number'
                  id='total2'
                  label='OtherNUmber'
                  variant='standard'
                  {...register('total2')}
                />
                <TextField
                  sx={{ padding: 2 }}
                  type='number'
                  id='balance'
                  label='Balance'
                  variant='standard'
                  {...register('balance', { required: 'Balance is Required' })}
                  error={!!errors.balance}
                  helperText={errors.balance?.message}
                />
                {isSubmitSuccessful && <p>Form submitted successfully!</p>}
                <Button type='submit' sx={{ mb: 2 }} variant='contained' disabled={isSubmitting}>
                  {isSubmitting ? 'Submitting...' : 'Add Test Case'}
                </Button>
              </form>
              <DevTool control={control} />
            </Box>
          </Grid>
        </DialogContent>
        <DialogActions>
          <Button onClick={handleClose}>Cancel</Button>
        </DialogActions>
      </Dialog>
    </div>
  )
}
